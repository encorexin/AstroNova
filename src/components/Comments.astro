---
import { siteConfig } from '@/config/site';

export interface Props {
  slug: string;
  title: string;
}

const { slug: _slug, title: _title } = Astro.props;

// Use giscus configuration from site config
const _giscusConfig = {
  repo: siteConfig.giscus.repo,
  repoId: siteConfig.giscus.repoId,
  category: siteConfig.giscus.category,
  categoryId: siteConfig.giscus.categoryId,
  mapping: siteConfig.giscus.mapping,
  reactionsEnabled: siteConfig.giscus.reactionsEnabled,
  emitMetadata: siteConfig.giscus.emitMetadata,
  inputPosition: 'top',
  theme: siteConfig.giscus.theme,
  lang: 'en',
  loading: 'lazy',
};
---

<div class="mt-12 border-t pt-12">
  <h2 class="mb-6 text-2xl font-bold">Comments</h2>
  <div id="giscus-container"></div>
</div>

<script define:vars={{ giscusConfig: _giscusConfig, slug: _slug, title: _title }} is:inline>
  // Get current theme based on HTML class or system preference
  function getCurrentTheme() {
    // Check localStorage first for explicit theme setting
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      return savedTheme;
    }
    
    // Check if dark mode is active via HTML class
    if (document.documentElement.classList.contains('dark')) {
      return 'dark';
    }
    
    // Check system preference as fallback
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    
    return 'light';
  }

  // Load Giscus script with specified theme
  function loadGiscus(theme) {
    const script = document.createElement('script');
    script.src = 'https://giscus.app/client.js';
    script.setAttribute('data-repo', giscusConfig.repo);
    script.setAttribute('data-repo-id', giscusConfig.repoId);
    script.setAttribute('data-category', giscusConfig.category);
    script.setAttribute('data-category-id', giscusConfig.categoryId);
    script.setAttribute('data-mapping', giscusConfig.mapping);
    script.setAttribute(
      'data-reactions-enabled',
      giscusConfig.reactionsEnabled
    );
    script.setAttribute('data-emit-metadata', giscusConfig.emitMetadata);
    script.setAttribute('data-input-position', giscusConfig.inputPosition);
    script.setAttribute('data-theme', theme);
    script.setAttribute('data-lang', giscusConfig.lang);
    script.setAttribute('data-loading', giscusConfig.loading);
    script.crossOrigin = 'anonymous';
    script.async = true;

    const container = document.getElementById('giscus-container');
    if (container) {
      container.appendChild(script);
    }
  }

  // Update giscus theme when system theme changes
  function updateGiscusTheme() {
    const iframe = document.querySelector('.giscus-frame');
    if (iframe && iframe.contentWindow) {
      const theme = getCurrentTheme();
      iframe.contentWindow.postMessage({ giscus: { setConfig: { theme } } }, 'https://giscus.app');
    }
  }

  // Listen for theme changes
  function setupThemeObserver() {
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', updateGiscusTheme);
    
    // Listen for manual theme toggle via localStorage and class changes
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          updateGiscusTheme();
        }
      });
    });
    
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class']
    });
    
    // Also listen for storage events (theme changes from other tabs)
    window.addEventListener('storage', (e) => {
      if (e.key === 'theme') {
        updateGiscusTheme();
      }
    });
  }

  // Initialize giscus and theme observer
  if (!document.querySelector('script[src="https://giscus.app/client.js"]')) {
    // Ensure theme is determined before loading giscus
    const currentTheme = getCurrentTheme();
    loadGiscus(currentTheme);
    setupThemeObserver();
  }
</script>
