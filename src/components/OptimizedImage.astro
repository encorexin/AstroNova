---

import { Image } from 'astro:assets';
import { imageConfig } from '@/config/performance';

export interface Props {
  src: string;
  alt: string;
  width?: number | undefined;
  height?: number | undefined;
  class?: string | null | undefined;
  loading?: 'lazy' | 'eager' | undefined;
  sizes?: string | null | undefined;
  quality?: number | undefined;
}

const {
  src: _src,
  alt: _alt,
  width: _width,
  height: _height,
  class: _className = '',
  loading: _loading = imageConfig.loading,
  sizes: _sizes = '100vw',
  quality: _quality = imageConfig.quality,
} = Astro.props;

// Calculate image ratio for placeholder
const _aspectRatio = _width && _height ? (_height / _width) * 100 : 56.25; // Default 16:9
---

<div
  class="relative overflow-hidden bg-gray-100 dark:bg-gray-800"
  style={`padding-bottom: ${_aspectRatio}%`}
>
  {
    _width && _height ? (
      <Image
          src={_src}
          alt={_alt}
          width={_width}
          height={_height}
          loading={_loading as 'lazy' | 'eager'}
          decoding="async"
          class={`absolute inset-0 h-full w-full object-cover transition-opacity duration-300 ${_className}`}
          quality={_quality}
          sizes={_sizes}
        />
    ) : (
      <Image
        src={_src}
        alt={_alt}
        loading={_loading as 'lazy' | 'eager'}
        decoding="async"
        class={`absolute inset-0 h-full w-full object-cover transition-opacity duration-300 ${_className}`}
        quality={_quality}
        sizes={_sizes}
        inferSize
      />
    )
  }

  <!-- Loading placeholder -->
  <div
    class="absolute inset-0 animate-pulse bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-600"
    aria-hidden="true"
  >
    <div class="absolute inset-0 flex items-center justify-center">
      <svg
        class="h-12 w-12 text-gray-400 dark:text-gray-500"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
        ></path>
      </svg>
    </div>
  </div>
</div>

<style>
  /* Image fade-in animation */
  img {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  img[data-loaded] {
    opacity: 1;
  }

  /* Placeholder animation */
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
</style>

<script>
  // Add fade-in effect after image loads
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('img');

    images.forEach((img) => {
      if (img.complete) {
        img.setAttribute('data-loaded', 'true');
      } else {
        img.addEventListener('load', () => {
          img.setAttribute('data-loaded', 'true');
        });
      }
    });
  });
</script>
