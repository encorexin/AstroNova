---

---

<div id="lightbox" class="fixed inset-0 z-50 hidden bg-black/90" data-lightbox>
  <div class="relative flex h-full w-full items-center justify-center p-4">
    <button
      class="absolute right-4 top-4 rounded-full bg-black/50 p-2 text-white transition-colors hover:bg-black/70"
      data-lightbox-close
      aria-label="Close lightbox"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>

    <img
      id="lightbox-image"
      class="max-h-full max-w-full object-contain"
      alt=""
      data-lightbox-image
    />

    <button
      class="absolute left-4 top-1/2 -translate-y-1/2 rounded-full bg-black/50 p-2 text-white transition-colors hover:bg-black/70"
      data-lightbox-prev
      aria-label="Previous image"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <polyline points="15 18 9 12 15 6"></polyline>
      </svg>
    </button>

    <button
      class="absolute right-4 top-1/2 -translate-y-1/2 rounded-full bg-black/50 p-2 text-white transition-colors hover:bg-black/70"
      data-lightbox-next
      aria-label="Next image"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <polyline points="9 18 15 12 9 6"></polyline>
      </svg>
    </button>
  </div>
</div>

<style>
  #lightbox {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  #lightbox-image {
    animation: zoomIn 0.3s ease-in-out;
  }

  @keyframes zoomIn {
    from {
      transform: scale(0.8);
    }
    to {
      transform: scale(1);
    }
  }
</style>

<script is:inline>
  class ImageLightbox {
    constructor() {
      this.lightbox = document.querySelector('[data-lightbox]');
      this.lightboxImage = document.querySelector('[data-lightbox-image]');
      this.images = document.querySelectorAll('img');
      this.currentIndex = 0;

      this.init();
    }

    init() {
      this.images.forEach((img, index) => {
        img.style.cursor = 'pointer';
        img.addEventListener('click', () => this.open(index));
      });

      this.lightbox?.addEventListener('click', (e) => {
        if (e.target === this.lightbox) {
          this.close();
        }
      });

      document
        .querySelector('[data-lightbox-close]')
        ?.addEventListener('click', () => this.close());
      document
        .querySelector('[data-lightbox-prev]')
        ?.addEventListener('click', () => this.prev());
      document
        .querySelector('[data-lightbox-next]')
        ?.addEventListener('click', () => this.next());

      document.addEventListener('keydown', (e) => {
        if (!this.lightbox?.classList.contains('hidden')) {
          if (e.key === 'Escape') this.close();
          if (e.key === 'ArrowLeft') this.prev();
          if (e.key === 'ArrowRight') this.next();
        }
      });
    }

    open(index) {
      this.currentIndex = index;
      const img = this.images[index];
      if (img && this.lightbox && this.lightboxImage) {
        this.lightboxImage.src = img.src;
        this.lightboxImage.alt = img.alt || '';
        this.lightbox.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    }

    close() {
      this.lightbox?.classList.add('hidden');
      document.body.style.overflow = '';
    }

    prev() {
      if (this.images.length > 1) {
        this.currentIndex =
          (this.currentIndex - 1 + this.images.length) % this.images.length;
        this.open(this.currentIndex);
      }
    }

    next() {
      if (this.images.length > 1) {
        this.currentIndex = (this.currentIndex + 1) % this.images.length;
        this.open(this.currentIndex);
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ImageLightbox());
  } else {
    new ImageLightbox();
  }
</script>
